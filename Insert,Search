
class Trie {
    struct TrieNode{
        struct TrieNode *child[26];
        bool isleaf;
    };
    TrieNode* root;
public:
    Trie() {
        root=new TrieNode();
    }
    
    void insert(string word) {
        TrieNode* curr=root;
        for(int i=0;i<word.size();i++){
            if(curr->child[word[i]-'a']==NULL){
                curr->child[word[i]-'a']=new TrieNode();
                
            }
            curr=curr->child[word[i]-'a'];
        }
        curr->isleaf=true;
        return;
    }
    
    bool search(string word) {
        TrieNode* curr=root;
        for(int i=0;i<word.size();i++){
            if(curr->child[word[i]-'a']==NULL){
                return false;
            }
            curr=curr->child[word[i]-'a'];
        }
        return curr->isleaf;
    }
    
    bool startsWith(string prefix) {
         TrieNode* curr=root;
        for(int i=0;i<prefix.size();i++){
            if(curr->child[prefix[i]-'a']==NULL){
                return false;
            }
            curr=curr->child[prefix[i]-'a'];
        }
        return true;
    }
};
